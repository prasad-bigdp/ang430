Components are the building blocks of User Interface. we divide the whole UI layout into reusable blocks of code called components.
To generate New Component, we use "ng generate component component-name"
Every component will have 4 files
  html(template) -- used for view
  css(style) -- used for styling/design
  ts(component) -- used for logic/control
  spec.ts(test) -- used for testing

Every component will have a name in component file(ts) as "selector". it can be used as html Element

one component can be inside anothe component called nested components

 Communication between the componets:
Communication between the components are three types:
  i. parent component to child component
  ii. child component to parent component
  iii. communication between unrelated components

  i. parent component to child component:
    parent component can send data to child component using @Input()
    parent component sends the data like attributes and child receives them using @Input()

//parent.component.html
<app- child   name="prasad" />

//child.component.ts
@Input()  name:string=''

//child.component.html
<p>{{name}}</p>


 ii. child component to parent component:
     child component can send data to parent component using three ways
      i. @viewChild() or @viewChildren():
      These directives are used to access the child data from parent component
      //parent.componet.ts
@viewChild(Child) c:Child;
fun(){
this.c.incr();
}

//parent.component.html
<app- child   name="prasad" />
<p>{{c.count}}</p>
<button (click)="fun()">+</button>

//child.component.ts
@Input()  name:string=''
count=0;
incr(){ this.count++;}

//child.component.html
<p>{{name}}</p>




